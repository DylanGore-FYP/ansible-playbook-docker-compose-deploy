version: '3.8'
services:
  # Traefik
  traefik:
    container_name: traefik
    image: traefik:livarot # the livarot tag refers to v2.4.x
    restart: unless-stopped
    command:
      # General
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      # - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      # Trust Cloudflare's IP range in case the server is behind Cloudflare's network
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,172.64.0.0/13,131.0.72.0/22,104.16.0.0/13,104.24.0.0/14
      - --api=true
      - --api.dashboard=true
      - --serversTransport.insecureSkipVerify=true
      # Logging
      - --log=true
      - --log.level=ERROR
      - --accessLog=false
      # - --accessLog.filePath=/traefik.log
      # - --accessLog.bufferingSize=100
      # - --accessLog.filters.statusCodes=400-499
      # Docker Provider
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true
      # Cloudflare CertResolver Setup
      # - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      # - --entrypoints.https.http.tls.domains[0].main={{ domain_name }}
      # - --entrypoints.https.http.tls.domains[0].sans=*.{{ domain_name }}
      # Let's Encrypt/Cloudflare TLS Configuration
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      # - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      # - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      # - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      # - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # Enable Prometheus Metrics
      - --metrics.prometheus=true
    networks:
      - proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /opt/traefik2/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /opt/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - /opt/traefik2/traefik.log:/traefik.log # for fail2ban - make sure to touch file before starting container
      - /opt/shared:/shared
    labels:
      - 'traefik.enable=true'
      # HTTP-to-HTTPS Redirect
      # - 'traefik.http.routers.http-catchall.entrypoints=http'
      # - 'traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)'
      # - 'traefik.http.routers.http-catchall.middlewares=redirect-to-https'
      # - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'
      # HTTP Routers
      - 'traefik.http.routers.traefik-rtr.entrypoints=http'
      - 'traefik.http.routers.traefik-rtr.rule=Host(`traefik.{{ domain_name }}`)'
      ## Services - API
      - 'traefik.http.routers.traefik-rtr.service=api@internal'
      ## Middlewares
      # - 'traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file'

  # InfluxDB
  influxdb:
    container_name: 'influxdb'
    image: influxdb:2.0.4-alpine
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      proxy:
        ipv4_address: 10.0.90.202
    ports:
      - 8086:8086
    environment:
      INFLUXD_REPORTING_DISABLED: 'true'
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_NAME: '{{ influx_username }}'
      DOCKER_INFLUXDB_INIT_USERNAME: '{{ influx_username }}'
      DOCKER_INFLUXDB_INIT_PASSWORD: '{{ influx_password }}'
      DOCKER_INFLUXDB_INIT_ORG: '{{ influx_org }}'
      DOCKER_INFLUXDB_INIT_BUCKET: '{{ influx_bucket }}'
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: '{{ influx_admin_token }}'
      V1_DB_NAME: '{{ influx_bucket }}'
      V1_RP_NAME: '{{ influx_username }}'
      V1_AUTH_USERNAME: '{{ influx_username }}'
      V1_AUTH_PASSWORD: '{{ influx_password }}'
    volumes:
      - /opt/influxdb/scripts:/docker-entrypoint-initdb.d
      - /opt/influxdb/data:/var/lib/influxdb2
      - /opt/influxdb/backups:/backups
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - 'traefik.enable=true'
      ## HTTP Routers
      - 'traefik.http.routers.influxdb-rtr.entrypoints=http'
      - 'traefik.http.routers.influxdb-rtr.rule=Host(`influxdb.{{ domain_name }}`)'
      ## Middlewares
      # - 'traefik.http.routers.influxdb-rtr.middlewares=chain-influxdb@file'
      ## HTTP Services
      - 'traefik.http.routers.influxdb-rtr.service=influxdb-svc'
      - 'traefik.http.services.influxdb-svc.loadbalancer.passHostHeader=true'
      - 'traefik.http.services.influxdb-svc.loadbalancer.server.port=8086'

  # Mosquitto
  mosquitto:
    container_name: 'mosquitto'
    image: eclipse-mosquitto:openssl
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      proxy:
        ipv4_address: 10.0.90.201
    ports:
      - 1883:1883
    volumes:
      - /opt/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - /opt/mosquitto/data:/mosquitto/data
      - /opt/mosquitto/passwd:/mosquitto/passwd
      - /opt/shared:/shared

  #  telegraf - InfluxDB Importer
  telegraf:
    container_name: 'telegraf'
    image: telegraf:1.17-alpine
    restart: unless-stopped
    networks:
      proxy:
        ipv4_address: 10.0.90.203
    security_opt:
      - no-new-privileges:true
    volumes:
      - /opt/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - 'traefik.enable=false'

  api:
    image: ghcr.io/dylangore-fyp/api:latest
    container_name: api
    restart: unless-stopped
    networks:
      - proxy
    # ports:
    #   - 5000:5000
    security_opt:
      - no-new-privileges:true
    environment:
      INFLUX_HOST: '{{ api_influx_host }}'
      INFLUX_PORT: '{{ api_influx_port }}'
      INFLUX_DATABASE: '{{ api_influx_database }}'
      INFLUX_USER: '{{ api_influx_username }}'
      INFLUX_PASSWORD: '{{ api_influx_password }}'
      INFLUX_ADMIN_UID: '{{ api_admin_uid }}'
      ENABLE_METRICS: '{{ api_enable_metrics }}'
    labels:
      - 'traefik.enable=true'
      ## HTTP Routers
      - 'traefik.http.routers.vehicles-api-rtr.entrypoints=http'
      - 'traefik.http.routers.vehicles-api-rtr.rule=Host(`api.{{ domain_name }}`)'
      ## Middlewares
      # - 'traefik.http.routers.vehicles-api-rtr.middlewares=chain-vehicles-api@file'
      ## HTTP Services
      - 'traefik.http.routers.vehicles-api-rtr.service=vehicles-api-svc'
      - 'traefik.http.services.vehicles-api-svc.loadbalancer.server.port=5000'

    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /opt/vehicles/api/serviceAccountKey.json:/fyp-api/serviceAccountKey.json:ro

  dashboard:
    image: ghcr.io/dylangore-fyp/dashboard:latest
    container_name: dashboard
    restart: unless-stopped
    networks:
      - proxy
    # ports:
    #   - 3000:80
    security_opt:
      - no-new-privileges:true
    environment:
      VITE_FIREBASE_API_KEY: '{{ dashboard_firebase_api_key }}'
      VITE_AUTH_DOMAIN: '{{ dashboard_auth_domain }}'
      VITE_PROJECT_ID: '{{ dashboard_project_id }}'
      VITE_STORAGE_BUCKET: '{{ dashboard_storage_bucket }}'
      VITE_MESSAGING_SENDER_ID: '{{ dashboard_message_sender_id }}'
      VITE_APP_ID: '{{ dashboard_app_id }}'
      VITE_ENABLE_USER_REGISTRATION: '{{ dashboard_enable_user_registration }}'
      VITE_API_LOCATION: '{{ dashboard_api_location }}'
      VITE_LOGIN_PROVIDERS: '{{ dashboard_login_providers }}'
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - 'traefik.enable=true'
      ## HTTP Routers
      - 'traefik.http.routers.dashboard-rtr.entrypoints=http'
      - 'traefik.http.routers.dashboard-rtr.rule=Host(`dashboard.{{ domain_name }}`)'
      ## Middlewares
      # - 'traefik.http.routers.dashboard-rtr.middlewares=chain-dashboard@file'
      ## HTTP Services
      - 'traefik.http.routers.dashboard-rtr.service=dashboard-svc'
      - 'traefik.http.services.dashboard-svc.loadbalancer.server.port=80'

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - proxy
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: 1001
      PGID: 1001
    volumes:
      - /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /opt/prometheus/rules.yml:/etc/prometheus/rules.yml:ro
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-admin-api'
    labels:
      - 'traefik.enable=true'
      ## HTTP Routers
      - 'traefik.http.routers.prometheus-rtr.entrypoints=http'
      - 'traefik.http.routers.prometheus-rtr.rule=Host(`prometheus.{{ domain_name }}`)'
      ## Middlewares
      # - 'traefik.http.routers.prometheus-rtr.middlewares=chain-prometheus@file'
      ## HTTP Services
      - 'traefik.http.routers.prometheus-rtr.service=prometheus-svc'
      - 'traefik.http.services.prometheus-svc.loadbalancer.server.port=9090'

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    networks:
      - proxy
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: 1001
      PGID: 1001
    volumes:
      - /opt/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - /opt/alertmanager:/etc/alertmanager
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - 9093:9093
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://alerts.{{ domain_name }}'
    labels:
      - 'traefik.enable=true'
      ## HTTP Routers
      - 'traefik.http.routers.alertmanager-rtr.entrypoints=http'
      - 'traefik.http.routers.alertmanager-rtr.rule=Host(`alerts.{{ domain_name }}`)'
      ## Middlewares
      # - 'traefik.http.routers.alertmanager-rtr.middlewares=chain-alertmanager@file'
      ## HTTP Services
      - 'traefik.http.routers.alertmanager-rtr.service=alertmanager-svc'
      - 'traefik.http.services.alertmanager-svc.loadbalancer.server.port=9093'

networks:
  proxy:
    external:
      name: proxy
